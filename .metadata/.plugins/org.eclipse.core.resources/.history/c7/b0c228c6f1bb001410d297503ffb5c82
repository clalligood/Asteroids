package game.objects;

import java.util.Random;

import org.newdawn.slick.GameContainer;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Vector2f;
import org.newdawn.slick.state.StateBasedGame;

public class Asteroid extends AbstractEntity {

	private static String imageString = "/assets/img/asteroid1.png";
	
	private final static Vector2f asteroidVelocity = new Vector2f(0.1f, 0.1f);

	public Asteroid(Random theRandom)
			throws SlickException {
		super(imageString, new Vector2f(0, 0), this.rotate(theRandom.nextInt(360)));
		
		this.rotate(theRandom.nextInt(360));
		
		int randX = theRandom.nextInt(800);
		int randY = theRandom.nextInt(600);
		
		this.setPosition(new Vector2f(randX, randY));
		myHealth = 100;
	}

	@Override
	public void init(GameContainer gc, StateBasedGame sbg) throws SlickException {
		Random rand = new Random();
		switch(rand.nextInt(3)) {
			case 1:
				imageString = "/assets/img/asteroid1.png";
				break;
			case 2:
				imageString = "/assets/img/asteroid2.png";
				break;
			case 3:
			default:
				imageString = "/assets/img/asteroid3.png";
				break;
		}

		this.setImage(imageString);
	}

	@Override
	public int update(GameContainer gc, StateBasedGame sbg, int delta) {
		myPosition.add(myVelocity);
				
		if (myHealth <= 0) {
			return 0;
		} else {
			return 1;
		}
	}

	@Override
	public void collide(AbstractEntity theEntity) {

	}

}
